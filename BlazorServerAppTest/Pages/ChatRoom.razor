@page "/chatroom"
@inject NavigationManager navigationManager
@inject IHttpClientFactory ClientFactory
@using BlazorServerAppTest.Repositories
@using Models
@inject IMessageRepo messageRepo

<h1>Chat Room</h1>
<hr/>

@if(!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username"/>
    <button type="button" @onclick="@Chat"><span class ="oi oi-chat" aria-hidden="true"></span> Chat! </button>

    //Error messsages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    //banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <buttton class="btn-group-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</buttton>
    </div>
    //display messages
    <div id="scrollbox">
        @foreach(var item in _messages)
        {
            @if (item.message.StartsWith("[Notice]"))
            {
                <div class="alert alert-info">@item.message</div>
            }
            else
            {
                
                <div class=@(item.username == _username ?"sent" :"received")>
                    <div class="user">@item.username @item.dateSent.ToString(" | HH:mm | MMM dd")</div>
                    <div class="msg">@item.message</div>
                </div>
            }
        }
        <hr/>
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(()=>SendAsync(_newMessage))">Send</button>
    </div>
}


@code {
    //flag to indicate chat status
    private bool _isChatting = false;

    //name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {

        //check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {

            //start chatting and force refresh UI
            _isChatting = true;
            await Task.Delay(1);

            //remove old messages if any
            // _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to staret chat client: {e.Message}";
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        // bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message { username = name, message = message, dateSent = DateTime.Now });


        //inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            // using var response = await HttpClient.PostAsJsonAsync("https://reqres.in/api/articles", new Message {username = _username, message = message, dateSent = DateTime.Now});

            //await Http.PostAsync("newMessage", new Message{ username = _username, message = message, dateSent = DateTime.Now()})

            var client = ClientFactory.CreateClient();

            messageRepo.newMessage(new Message { username = _username, message = message, dateSent = DateTime.Now });
            //using var httpResponseMessage = await client.PostAsync("newMessage",
            //new StringContent(JsonSerializer.Serialize(new Message { username = _username, message = message, dateSent = DateTime.Now })));

            _newMessage = string.Empty;
        }
    }



    @*
    private class Message
    {
        public Message (string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");
        public string CSS => Mine ? "sent" : "received";
    }
    *@
}
