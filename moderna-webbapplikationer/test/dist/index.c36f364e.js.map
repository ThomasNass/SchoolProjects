{"mappings":"AAAA,MAAM,QAAQ,GAAG,aAAa,AAAC;AAC/B,MAAM,GAAG,GAAG,0CAA0C,AAAC;AACvD,IAAI,MAAM,GAAG,UAAU,CAAC,EAAE,CAAC,AAAC;AAC5B,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,AAAC;AACtB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,AAAC;AAIxD,MAAM,OAAO,GAAG,UAAY;IACxB,MAAM,GAAG,MAAM,MAAM,CAAC,QAAQ,GAAG,aAAa,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC;IAE/D,OAAO,MAAM,CAAC;CACjB;AAED,OAAO,GAAG,OAAO,OAAO,GAAK;IACzB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,+BAA+B,EACxD;QACI,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,OAAO;KACnB,CAAC,AAAC;IACP,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,AAAC;IACnC,OAAO,IAAI,CAAC;CACf;AAGD,MAAM,KAAK,GAAG,UAAY;IACtB,IAAI,MAAM,GAAG,MAAM,OAAO,EAAE,AAAC;IAC7B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAI,OAAO,GAAG;QACV,cAAc,EAAE,kBAAkB;QAClC,gBAAgB,EAAE,QAAQ;QAC1B,YAAY,EAAE,aAAa;QAC3B,cAAc,EAAE,MAAM;QACtB,YAAY,EAAE,MAAM;KACvB;IACD,IAAI,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,AAAC;IAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CACrB;AAKD,SAAS,UAAU,CAAC,MAAM,EAAE;IACxB,IAAI,MAAM,GAAG,EAAE,AAAC;IAChB,IAAI,UAAU,GAAG,gEAAgE,AAAC;IAClF,IAAI,gBAAgB,GAAG,UAAU,CAAC,MAAM,AAAC;IACzC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,CAC3B,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAChD,gBAAgB,CAAC,CAAC,CAAC;IAE3B,OAAO,MAAM,CAAC;CACjB;AAED,eAAe,MAAM,CAAC,OAAO,EAAE;IAC3B,kBAAkB;IAClB,MAAM,SAAS,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,AAAC;IAEpD,mBAAmB;IACnB,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,AAAC;IAEpE,+BAA+B;IAC/B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,AAAC;IAEzD,gDAAgD;IAChD,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA,CAAC,GAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAAA,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,AAAC;IAC7E,OAAO,OAAO,CAAC;CAClB;AAED,KAAK,EAAE,CAAC","sources":["index.js"],"sourcesContent":["const callerId = \"CityCompare\";\r\nconst key = \"umCNJiVO1qZR7R8jiGLAxkJaT3xhEiAUPO98Vqts\";\r\nlet random = makeRandom(16);\r\nlet date = new Date();\r\nconst unixTimestamp = Math.floor(date.getTime() / 1000);\r\n\r\n\r\n\r\nconst getHash = async () => {\r\n    hashed = await sha256(callerId + unixTimestamp + key + random);\r\n\r\n    return hashed;\r\n}\r\n\r\ngetData = async (headers) => {\r\n    const response = await fetch(\"/api/hitta/mcdonalds/vetlanda\",\r\n        {\r\n            method: \"GET\",\r\n            headers: headers\r\n        });\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\n\r\nconst hitta = async () => {\r\n    let hashed = await getHash();\r\n    console.log(hashed)\r\n    let headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        \"hitta-callerid\": callerId,\r\n        \"hitta-time\": unixTimestamp,\r\n        \"hitta-random\": random,\r\n        \"hitta-hash\": hashed\r\n    }\r\n    let data = await getData(headers);\r\n    console.log(data);\r\n}\r\n\r\n\r\n\r\n\r\nfunction makeRandom(length) {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() *\r\n            charactersLength));\r\n    }\r\n    return result;\r\n}\r\n\r\nasync function sha256(message) {\r\n    // encode as UTF-8\r\n    const msgBuffer = new TextEncoder().encode(message);\r\n\r\n    // hash the message\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\r\n\r\n    // convert ArrayBuffer to Array\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n\r\n    // convert bytes to hex string                  \r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n}\r\n\r\nhitta();"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"../"}